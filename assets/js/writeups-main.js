/**
 * Dynamic Writeup System for GitHub Pages
 * 
 * This script:
 * 1. Loads writeup data from a JSON file generated by Jekyll
 * 2. Shows the most recent writeups at the top
 * 3. Creates a paginated list of older writeups
 * 4. Provides search and filtering functionality
 */

// This variable will hold all writeups once loaded
let writeups = [];

// Function to create writeup HTML
function createWriteupHTML(writeup, isFeatured = false) {
    const style = isFeatured ? 'background-color: rgba(255, 107, 107, 0.1); border-color: rgba(255, 107, 107, 0.3);' : '';
    const thumbnailHTML = writeup.thumbnail ? 
        `<div class="writeups-thumbnail">
            <img src="${writeup.thumbnail}" alt="${writeup.title}">
        </div>` : '';
    
    // Check if writeup is new
    const isNew = isNewWriteup(writeup.date);
    const newBadge = isNew ? '<span class="new-badge">NEW</span>' : '';
    
    // Create tag badges if available
    let tagBadges = '';
    if (writeup.tags && writeup.tags.length > 0) {
        tagBadges = '<div class="article-tags">';
        writeup.tags.forEach(tag => {
            tagBadges += `<span class="article-tag" data-tag="${tag}">${tag}</span>`;
        });
        tagBadges += '</div>';
    }
    
    return `
        <div class="writeups-item" style="${style}" data-writeup-id="${writeup.id}">
            ${newBadge}
            ${thumbnailHTML}
            <div class="writeups-content">
                <h2 class="writeups-title">${writeup.displayTitle || writeup.title}</h2>
                <div class="writeups-meta">Published: ${formatDate(writeup.date)}${writeup.author ? ' by <span class="author-name">' + writeup.author + '</span>' : ''}</div>
                ${tagBadges}
                <div class="writeups-summary">
                    <p>${writeup.summary}</p>
                </div>
                <a href="${writeup.url}" class="read-more">Read More</a>
            </div>
        </div>
    `;
}

// Display latest writeups (top featured writeups)
function displayLatestWriteups() {
    const latestWriteupsContainer = document.getElementById('latestWriteups');
    const latestWriteups = writeups.slice(0, writeupsSettings.featuredWriteups);
    
    // Clear previous content except the header
    const headerElement = latestWriteupsContainer.querySelector('h2');
    latestWriteupsContainer.innerHTML = '';
    latestWriteupsContainer.appendChild(headerElement);
    
    // Create a grid container for featured writeups
    const gridContainer = document.createElement('div');
    gridContainer.className = 'featured-grid';
    
    latestWriteups.forEach(writeup => {
        gridContainer.innerHTML += createWriteupHTML(writeup, true); // true indicates this is a featured writeup
    });
    
    latestWriteupsContainer.appendChild(gridContainer);
}

// Display older writeups with pagination
function displayOlderWriteups() {
    const olderWriteups = writeups.slice(writeupsSettings.featuredWriteups); // Skip the featured writeups
    
    // If no older writeups, hide the section
    if (olderWriteups.length === 0) {
        document.getElementById('olderWriteups').style.display = 'none';
        return;
    }
    
    const totalPages = Math.ceil(olderWriteups.length / writeupsSettings.writeupsPerPage);
    
    function displayWriteupsForPage(pageNumber) {
        const writeupsListContainer = document.getElementById('writeupsList');
        const start = (pageNumber - 1) * writeupsSettings.writeupsPerPage;
        const end = start + writeupsSettings.writeupsPerPage;
        const pageWriteups = olderWriteups.slice(start, end);
        
        // Clear previous content
        writeupsListContainer.innerHTML = '';
        
        let writeupsHTML = '';
        pageWriteups.forEach(writeup => {
            writeupsHTML += createWriteupHTML(writeup);
        });
        
        writeupsListContainer.innerHTML = writeupsHTML;
        updatePaginationUI(pageNumber);
    }
    
    function updatePaginationUI(currentPage) {
        const paginationContainer = document.getElementById('pagination');
        let paginationHTML = '';
        
        // Previous button
        paginationHTML += `<li class="${currentPage === 1 ? 'disabled' : ''}">`;
        if (currentPage === 1) {
            paginationHTML += `<span>&laquo;</span>`;
        } else {
            paginationHTML += `<a href="#" onclick="changePage(${currentPage - 1}); return false;">&laquo;</a>`;
        }
        paginationHTML += `</li>`;
        
        // Page numbers
        for (let i = 1; i <= totalPages; i++) {
            if (i === currentPage) {
                paginationHTML += `<li class="active"><span>${i}</span></li>`;
            } else {
                paginationHTML += `<li><a href="#" onclick="changePage(${i}); return false;">${i}</a></li>`;
            }
        }
        
        // Next button
        paginationHTML += `<li class="${currentPage === totalPages ? 'disabled' : ''}">`;
        if (currentPage === totalPages) {
            paginationHTML += `<span>&raquo;</span>`;
        } else {
            paginationHTML += `<a href="#" onclick="changePage(${currentPage + 1}); return false;">&raquo;</a>`;
        }
        paginationHTML += `</li>`;
        
        paginationContainer.innerHTML = paginationHTML;
    }
    
    // Initialize with page 1
    displayWriteupsForPage(1);
    
    // Make changePage function globally available
    window.changePage = function(pageNumber) {
        displayWriteupsForPage(pageNumber);
        window.scrollTo({
            top: document.getElementById('olderWriteups').offsetTop - 200,
            behavior: 'smooth'
        });
    };
}

// Function to get all unique tags from writeups
function getAllTags() {
    const tags = new Set();
    writeups.forEach(writeup => {
        if (writeup.tags && Array.isArray(writeup.tags)) {
            writeup.tags.forEach(tag => tags.add(tag));
        }
    });
    return Array.from(tags).sort();
}

// Function to populate filter tags
function populateFilterTags() {
    const filterTagsContainer = document.getElementById('filterTags');
    const allTags = getAllTags();
    
    // Add "All" tag first
    const allTag = document.createElement('span');
    allTag.className = 'filter-tag active';
    allTag.dataset.tag = 'all';
    allTag.textContent = 'All';
    allTag.addEventListener('click', () => filterByTag('all'));
    filterTagsContainer.appendChild(allTag);
    
    // Add other tags
    allTags.forEach(tag => {
        const tagElement = document.createElement('span');
        tagElement.className = 'filter-tag';
        tagElement.dataset.tag = tag;
        tagElement.textContent = tag;
        tagElement.addEventListener('click', () => filterByTag(tag));
        filterTagsContainer.appendChild(tagElement);
    });
}

// Function to filter writeups by tag
function filterByTag(tag) {
    // Update active tag state
    const filterTags = document.querySelectorAll('.filter-tag');
    filterTags.forEach(el => {
        if (el.dataset.tag === tag) {
            el.classList.add('active');
        } else {
            el.classList.remove('active');
        }
    });
    
    // Clear search if active
    document.getElementById('writeupSearch').value = '';
    document.getElementById('searchClear').style.display = 'none';
    const searchResultsSection = document.getElementById('searchResults');
    if (searchResultsSection) {
        searchResultsSection.style.display = 'none';
    }
    
    // Show regular sections
    document.getElementById('latestWriteups').style.display = 'block';
    document.getElementById('olderWriteups').style.display = 'block';
    
    if (tag === 'all') {
        // Reset to default view
        displayLatestWriteups();
        displayOlderWriteups();
        return;
    }
    
    // Filter writeups by selected tag
    const filteredWriteups = writeups.filter(writeup => 
        writeup.tags && Array.isArray(writeup.tags) && writeup.tags.includes(tag)
    );
    
    // Update display with filtered writeups
    const latestWriteupsContainer = document.getElementById('latestWriteups');
    const headerElement = latestWriteupsContainer.querySelector('h2');
    latestWriteupsContainer.innerHTML = '';
    latestWriteupsContainer.appendChild(headerElement);
    
    const olderWriteupsContainer = document.getElementById('olderWriteups');
    const olderHeaderElement = olderWriteupsContainer.querySelector('h2');
    olderWriteupsContainer.innerHTML = '';
    olderWriteupsContainer.appendChild(olderHeaderElement);
    
    // Display filtered writeups
    if (filteredWriteups.length === 0) {
        latestWriteupsContainer.innerHTML += '<p>No writeups found with this tag.</p>';
        olderWriteupsContainer.style.display = 'none';
        return;
    }
    
    // Featured writeups (up to 4)
    const featuredCount = Math.min(filteredWriteups.length, writeupsSettings.featuredWriteups);
    const featuredWriteups = filteredWriteups.slice(0, featuredCount);
    let featuredHTML = '';
    
    featuredWriteups.forEach(writeup => {
        featuredHTML += createWriteupHTML(writeup, true);
    });
    
    latestWriteupsContainer.innerHTML += featuredHTML;
    
    // Older writeups with pagination
    const olderFilteredWriteups = filteredWriteups.slice(featuredCount);
    
    if (olderFilteredWriteups.length === 0) {
        olderWriteupsContainer.style.display = 'none';
        return;
    }
    
    // Replace the global olderWriteups for pagination to work
    window.filteredOlderWriteups = olderFilteredWriteups;
    window.isFiltering = true;
    
    // Update paging for filtered results
    const writeupsListContainer = document.getElementById('writeupsList');
    const paginationContainer = document.getElementById('pagination');
    
    // Display first page of filtered results
    const writeupsPerPage = writeupsSettings.writeupsPerPage;
    const firstPageWriteups = olderFilteredWriteups.slice(0, writeupsPerPage);
    
    let writeupsHTML = '';
    firstPageWriteups.forEach(writeup => {
        writeupsHTML += createWriteupHTML(writeup);
    });
    
    writeupsListContainer.innerHTML = writeupsHTML;
    
    // Update pagination
    const totalFilteredPages = Math.ceil(olderFilteredWriteups.length / writeupsPerPage);
    
    let paginationHTML = '';
    
    // Previous button
    paginationHTML += `<li class="disabled"><span>&laquo;</span></li>`;
    
    // Page numbers
    for (let i = 1; i <= totalFilteredPages; i++) {
        if (i === 1) {
            paginationHTML += `<li class="active"><span>1</span></li>`;
        } else {
            paginationHTML += `<li><a href="#" onclick="changeFilteredPage(${i}); return false;">${i}</a></li>`;
        }
    }
    
    // Next button
    if (totalFilteredPages > 1) {
        paginationHTML += `<li><a href="#" onclick="changeFilteredPage(2); return false;">&raquo;</a></li>`;
    } else {
        paginationHTML += `<li class="disabled"><span>&raquo;</span></li>`;
    }
    
    paginationContainer.innerHTML = paginationHTML;
    
    // Make changeFilteredPage function globally available
    window.changeFilteredPage = function(pageNumber) {
        const start = (pageNumber - 1) * writeupsPerPage;
        const end = start + writeupsPerPage;
        const pageWriteups = olderFilteredWriteups.slice(start, end);
        
        let writeupsHTML = '';
        pageWriteups.forEach(writeup => {
            writeupsHTML += createWriteupHTML(writeup);
        });
        
        writeupsListContainer.innerHTML = writeupsHTML;
        
        // Update pagination UI
        const paginationLinks = paginationContainer.querySelectorAll('li');
        paginationLinks.forEach((li, index) => {
            // Skip first and last items (prev/next buttons)
            if (index === 0) {
                // Previous button
                if (pageNumber === 1) {
                    li.className = 'disabled';
                    li.innerHTML = `<span>&laquo;</span>`;
                } else {
                    li.className = '';
                    li.innerHTML = `<a href="#" onclick="changeFilteredPage(${pageNumber - 1}); return false;">&laquo;</a>`;
                }
            } else if (index === paginationLinks.length - 1) {
                // Next button
                if (pageNumber === totalFilteredPages) {
                    li.className = 'disabled';
                    li.innerHTML = `<span>&raquo;</span>`;
                } else {
                    li.className = '';
                    li.innerHTML = `<a href="#" onclick="changeFilteredPage(${pageNumber + 1}); return false;">&raquo;</a>`;
                }
            } else {
                // Page numbers
                const pageNum = index;
                if (pageNum === pageNumber) {
                    li.className = 'active';
                    li.innerHTML = `<span>${pageNum}</span>`;
                } else {
                    li.className = '';
                    li.innerHTML = `<a href="#" onclick="changeFilteredPage(${pageNum}); return false;">${pageNum}</a>`;
                }
            }
        });
        
        window.scrollTo({
            top: document.getElementById('olderWriteups').offsetTop - 200,
            behavior: 'smooth'
        });
    };
}

// Function to load writeup data dynamically
function loadWriteups() {
    // Return the promise so we can chain actions
    return fetch('/writeups/writeups.json')
        .then(response => {
            if (!response.ok) {
                throw new Error('Failed to load writeups data');
            }
            return response.json();
        })
        .then(data => {
            // Store the writeups and sort by ID (highest to lowest)
            writeups = data.sort((a, b) => parseInt(b.id) - parseInt(a.id));
            // Add loading effect
            document.getElementById('latestWriteups').classList.add('loaded');
            document.getElementById('olderWriteups').classList.add('loaded');
            // Process writeup titles to prefer H1 headings if available
            writeups.forEach(writeup => {
                // The H1 extraction is primarily handled by Jekyll server-side in the writeups.json
                // This is just a fallback in case we need to process the title in JS
                if (writeup.content) {
                    try {
                        const extractedH1 = extractH1FromMarkdown(writeup.content);
                        if (extractedH1) {
                            console.log(`Found H1 in writeup ${writeup.id}: ${extractedH1}`);
                            writeup.displayTitle = extractedH1;
                        } else {
                            writeup.displayTitle = writeup.title;
                        }
                    } catch (e) {
                        console.error(`Error extracting H1 from writeup ${writeup.id}:`, e);
                        writeup.displayTitle = writeup.title;
                    }
                } else {
                    writeup.displayTitle = writeup.title;
                }
            });
            
            // Populate filter tags
            populateFilterTags();
            
            // Check URL params for tag filtering
            const urlParams = new URLSearchParams(window.location.search);
            const tagParam = urlParams.get('tag');
            
            if (tagParam) {
                filterByTag(tagParam);
            } else {
                // Now that we have the data, display the writeups
                displayLatestWriteups();
                displayOlderWriteups();
            }
            
            // If no writeups found, show a message
            if (writeups.length === 0) {
                document.getElementById('latestWriteups').innerHTML += '<p>No writeups found. Check back soon!</p>';
                document.getElementById('olderWriteups').style.display = 'none';
            }
        })
        .catch(error => {
            console.error('Error loading writeups:', error);
            
            // Show fallback content in case of error
            document.getElementById('latestWriteups').innerHTML += '<p>Failed to load writeups. Please try again later.</p>';
            document.getElementById('olderWriteups').style.display = 'none';
        });
}

// Function to search writeups
function searchWriteups() {
    const searchTerm = document.getElementById('writeupSearch').value.toLowerCase();
    const searchClearButton = document.getElementById('searchClear');
    
    // Show/hide clear button based on search term existence
    if (searchTerm) {
        searchClearButton.style.display = 'block';
    } else {
        searchClearButton.style.display = 'none';
    }
    
    if (!searchTerm) {
        // If no search term, restore default view
        document.getElementById('latestWriteups').style.display = 'block';
        document.getElementById('olderWriteups').style.display = 'block';
        displayLatestWriteups();
        displayOlderWriteups();
        return;
    }
    
    // Hide the regular sections
    document.getElementById('latestWriteups').style.display = 'none';
    document.getElementById('olderWriteups').style.display = 'none';
    
    // Create search results section if it doesn't exist
    let searchResultsSection = document.getElementById('searchResults');
    if (!searchResultsSection) {
        searchResultsSection = document.createElement('div');
        searchResultsSection.id = 'searchResults';
        searchResultsSection.className = 'writeups-section';
        searchResultsSection.innerHTML = '<h2>Search Results</h2><div id="searchResultsList"></div>';
        
        // Insert after search box
        document.querySelector('.search-container').parentNode.insertAdjacentElement('afterend', searchResultsSection);
    } else {
        searchResultsSection.style.display = 'block';
    }
    
    // Filter writeups by search term
    const filteredWriteups = writeups.filter(writeup => {
        return writeup.title.toLowerCase().includes(searchTerm) ||
               writeup.summary.toLowerCase().includes(searchTerm) ||
               (writeup.author && writeup.author.toLowerCase().includes(searchTerm));
    });
    
    // Display search results
    const searchResultsList = document.getElementById('searchResultsList');
    
    if (filteredWriteups.length === 0) {
        searchResultsList.innerHTML = '<p>No writeups found matching your search.</p>';
        return;
    }
    
    let resultsHTML = '';
    filteredWriteups.forEach(writeup => {
        resultsHTML += createWriteupHTML(writeup);
    });
    
    searchResultsList.innerHTML = resultsHTML;
}

// Function to clear search
function clearSearch() {
    document.getElementById('writeupSearch').value = '';
    document.getElementById('searchClear').style.display = 'none';
    
    // Hide search results section
    const searchResults = document.getElementById('searchResults');
    if (searchResults) {
        searchResults.style.display = 'none';
    }
    
    // Check if we're in filtered view
    const filteredSection = document.getElementById('filteredResults');
    if (filteredSection && filteredSection.style.display !== 'none') {
        // We're in filtered view, keep it
        return;
    }
    
    // Restore default sections
    document.getElementById('latestWriteups').style.display = 'block';
    document.getElementById('olderWriteups').style.display = 'block';
    displayLatestWriteups();
    displayOlderWriteups();
    
    // Reset tag filters
    const filterTags = document.querySelectorAll('.filter-tag');
    filterTags.forEach(el => {
        if (el.dataset.tag === 'all') {
            el.classList.add('active');
        } else {
            el.classList.remove('active');
        }
    });
    
    window.isFiltering = false;
}

// Function to get URL parameters
function getUrlParameter(name) {
    name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
    var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
    var results = regex.exec(location.search);
    return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
}

// Handle click on writeup tags
document.addEventListener('click', function(e) {
    if (e.target.classList.contains('article-tag')) {
        const tag = e.target.dataset.tag;
        filterByTag(tag);
        // Scroll to top of the filter results
        window.scrollTo({
            top: document.querySelector('.filter-container').offsetTop - 100,
            behavior: 'smooth'
        });
    }
});

// Initialize the writeup display when document is ready
document.addEventListener('DOMContentLoaded', function() {
    loadWriteups().then(() => {
        // Check if there's a tag parameter in the URL
        const tagParam = getUrlParameter('tag');
        if (tagParam) {
            // Find if this tag exists in our filter options
            const tagExists = Array.from(document.querySelectorAll('.filter-tag')).some(el => 
                el.dataset.tag === tagParam
            );
            
            if (tagExists) {
                filterByTag(tagParam);
            }
        }
    });
    
    // Hide clear search button initially
    document.getElementById('searchClear').style.display = 'none';
});